// src/components/ChatList/ChatList.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import API, {
  setAuthToken,
  getUserIdFromToken,
  createGroupChat
} from '../../services/api';
import '../../App.css';

export default function ChatList({ token: propToken }) {
  const token         = propToken || localStorage.getItem('accessToken');
  const currentUserId = getUserIdFromToken(token);
  const [chats, setChats]           = useState([]);
  const [search, setSearch]         = useState('');
  const [showGroupModal, setShowGroupModal] = useState(false);
  const [groupName, setGroupName]   = useState('');
  const [selectedIds, setSelectedIds] = useState([]);
  const navigate       = useNavigate();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
  useEffect(() => {
    if (!token) return;
    setAuthToken(token);
    API.get('chats/')
       .then(res => setChats(res.data))
       .catch(err => console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:', err));
  }, [token]);

  // –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
  const handleSearch = () => {
    if (!search.trim()) return;
    API.post('chats/find_or_create/', { username: search.trim() })
       .then(res => {
         const chat = res.data;
         // –≤—ã—á–∏—Å–ª—è–µ–º –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
         const other = chat.participants_usernames.filter(
           (_, i) => chat.participants[i] !== currentUserId
         );
         const name = other[0] || `–ß–∞—Ç ${chat.id}`;
         navigate(`/chat/${chat.id}`, { state: { name } });
       })
       .catch(err => console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', err));
  };

  // –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–∑ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤)
  const contacts = React.useMemo(() => {
    return chats
      .filter(c => !c.is_group)
      .map(c => {
        const idx = c.participants.indexOf(currentUserId);
        const otherIdx = idx === 0 ? 1 : 0;
        return {
          id: c.participants[otherIdx],
          username: c.participants_usernames[otherIdx]
        };
      })
      // —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏
      .reduce((acc, u) => {
        if (!acc.find(x => x.id === u.id)) acc.push(u);
        return acc;
      }, []);
  }, [chats, currentUserId]);

  // –û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –ø–æ–ø–∞–ø
  const openGroupModal = () => {
    setGroupName('');
    setSelectedIds([]);
    setShowGroupModal(true);
  };
  const closeGroupModal = () => setShowGroupModal(false);

  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
  const toggleSelect = id => {
    setSelectedIds(s =>
      s.includes(id) ? s.filter(x => x !== id) : [...s, id]
    );
  };

  // –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
  const handleCreateGroup = () => {
    if (!groupName.trim() || selectedIds.length === 0) return;
    createGroupChat(groupName.trim(), selectedIds)
      .then(res => {
        const chat = res.data;
        navigate(`/chat/${chat.id}`, { state: { name: chat.name } });
        closeGroupModal();
      })
      .catch(err => {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞:', err);
      });
  };

  return (
    <div className="chat-list-container">
      {/* Header: –Ω–∞–∑–≤–∞–Ω–∏–µ + –∫–Ω–æ–ø–∫–∏ */}
      <div className="chat-list-header">
        <div className="chat-list-title">–ß–∞—Ç—ã</div>
        <button
          className="profile-btn"
          title="–ü—Ä–æ—Ñ–∏–ª—å"
          onClick={() => navigate('/profile')}
        >üë§</button>
        <button
          className="group-create-btn"
          title="–ù–æ–≤—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç"
          onClick={openGroupModal}
        >üë•+</button>
      </div>

      {/* –ü–æ–∏—Å–∫ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ */}
      <div className="chat-list-search">
        <input
          type="text"
          placeholder="–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
          value={search}
          onChange={e => setSearch(e.target.value)}
        />
        <button onClick={handleSearch}>–ù–∞–π—Ç–∏</button>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö –∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ */}
      <div className="chat-list-items">
        {chats.map(chat => {
          // –≤—ã—á–∏—Å–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
          let name = chat.name;
          if (!chat.is_group) {
            const other = chat.participants_usernames.filter(
              (_, i) => chat.participants[i] !== currentUserId
            );
            name = other[0] || `–ß–∞—Ç ${chat.id}`;
          }
          return (
            <div
              key={chat.id}
              className="chat-list-item"
              onClick={() => navigate(`/chat/${chat.id}`, { state: { name } })}
            >
              <div className="avatar" />
              <div className="username">{name}</div>
            </div>
          );
        })}
      </div>

      {/* –ü–æ–ø–∞–ø —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ */}
      {showGroupModal && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>–ù–æ–≤—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç</h3>
            <label>
              –ù–∞–∑–≤–∞–Ω–∏–µ:
              <input
                type="text"
                value={groupName}
                onChange={e => setGroupName(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥—Ä—É–ø–ø—ã"
              />
            </label>
            <div className="contacts-list">
              {contacts.map(u => (
                <label key={u.id} className="contact-item">
                  <input
                    type="checkbox"
                    checked={selectedIds.includes(u.id)}
                    onChange={() => toggleSelect(u.id)}
                  />
                  {u.username}
                </label>
              ))}
            </div>
            <div className="modal-actions">
              <button onClick={handleCreateGroup} disabled={!groupName || !selectedIds.length}>
                –°–æ–∑–¥–∞—Ç—å
              </button>
              <button onClick={closeGroupModal}>–û—Ç–º–µ–Ω–∏—Ç—å</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
